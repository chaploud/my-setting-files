// Place your key bindings in this file to override the defaults
[
  // Markdown All in One
  // ,,でチェックボックスをトグル
  {
    "key": ", ,",
    "command": "markdown.extension.checkTaskList",
    "when": "editorTextFocus && editorLangId =~ /^markdown$|^rmd$|^quarto$/"
  },
  // ===== VSCode NeoVim =====
  // Which Key(init.lua側から呼ぶため省略)
  // ctrl+d, ctrl+uの挙動修正
  {
    "key": "ctrl+d",
    "command": "vscode-neovim.send",
    "args": "<C-d>",
    "when": "editorTextFocus && neovim.init"
  },
  {
    "key": "ctrl+u",
    "command": "vscode-neovim.send",
    "args": "<C-u>",
    "when": "editorTextFocus && neovim.init"
  },
  {
    // NeoVim側にはESCで伝わる
    "key": "ctrl+g",
    "command": "vscode-neovim.send",
    "args": "<ESC>",
    "when": "editorTextFocus && neovim.init"
  },
  // Normal Modeでのctrl+zによるUndoの挙動
  {
    "key": "ctrl+z",
    "command": "vscode-neovim.send",
    "args": "u",
    "when": "editorTextFocus && neovim.init && neovim.mode == 'normal'"
  },
  // "ctrl+m" を "enter" として振舞わせたい
  // [A] 余計な"ctrl+m"を解除
  {
    "key": "ctrl+m",
    "command": "-editor.action.toggleTabFocusMode"
  },
  // [B] "enter" でkeybindingsを検索して出てきたものに、"ctrl+m"も割り当てる
  // デフォルトのABC順(大文字→小文字)でその都度過不足があれば修正していく
  {
    "key": "ctrl+m",
    "command": "repl.action.acceptInput",
    "when": "inDebugRepl && textInputFocus"
  },
  {
    "key": "ctrl+m",
    "command": "editor.action.nextMatchFindAction",
    "when": "editorFocus && findInputFocussed"
  },
  {
    "key": "ctrl+m",
    "command": "editor.action.insertColorWithStandaloneColorPicker",
    "when": "standaloneColorPickerFocused"
  },
  {
    "key": "ctrl+m",
    "command": "notebook.cell.edit",
    "when": "notebookCellListFocused && !editorHoverFocused && !inputFocus && !notebookOutputInputFocused"
  },
  {
    "key": "ctrl+m",
    "command": "workbench.action.terminal.findPrevious",
    "when": "terminalFindInputFocused && terminalHasBeenCreated || terminalFindInputFocused && terminalProcessSupported"
  },
  {
    "key": "ctrl+m",
    "command": "acceptRenameInput",
    "when": "editorFocus && renameInputVisible && !isComposing"
  },
  {
    "key": "ctrl+m",
    "command": "acceptSelectedCodeAction",
    "when": "codeActionMenuVisible"
  },
  {
    "key": "ctrl+m",
    "command": "acceptSelectedSuggestion",
    "when": "acceptSuggestionOnEnter && suggestWidgetHasFocusedSuggestion && suggestWidgetVisible && suggestionMakesTextEdit && textInputFocus"
  },
  {
    "key": "ctrl+m",
    "command": "breadcrumbs.selectFocused",
    "when": "breadcrumbsActive && breadcrumbsVisible"
  },
  {
    "key": "ctrl+m",
    "command": "breakpointWidget.action.acceptInput",
    "when": "breakpointWidgetVisible && inBreakpointWidget"
  },
  {
    "key": "ctrl+m",
    "command": "calva.evaluateReplWindowForm",
    "when": "calva:keybindingsEnabled && calva:outputWindowActive && calva:replWindowSubmitOnEnter && editorTextFocus && !suggestWidgetVisible"
  },
  {
    "key": "ctrl+m",
    "command": "editor.action.extensioneditor.findNext",
    "when": "webviewFindWidgetFocused && !editorFocus && activeEditor == 'workbench.editor.extension'"
  },
  {
    "key": "ctrl+m",
    "command": "editor.action.goToFocusedStickyScrollLine",
    "when": "stickyScrollFocused"
  },
  {
    "key": "ctrl+m",
    "command": "editor.action.replaceOne",
    "when": "editorFocus && findWidgetVisible && replaceInputFocussed"
  },
  {
    "key": "ctrl+m",
    "command": "editor.action.webvieweditor.findNext",
    "when": "webviewFindWidgetFocused && !editorFocus && activeEditor == 'WebviewEditor'"
  },
  {
    "key": "ctrl+m",
    "command": "explorer.openAndPassFocus",
    "when": "filesExplorerFocus && foldersViewVisible && !explorerResourceIsFolder && !inputFocus"
  },
  {
    "key": "ctrl+m",
    "command": "iconSelectBox.selectFocused",
    "when": "iconSelectBoxFocus"
  },
  {
    "key": "ctrl+m",
    "command": "interactive.execute",
    "when": "isCompositeNotebook && !config.interactiveWindow.executeWithShiftEnter && activeEditor == 'workbench.editor.interactive'"
  },
  {
    "key": "ctrl+m",
    "command": "keybindings.editor.acceptWhenExpression",
    "when": "inKeybindings && whenFocus && !suggestWidgetVisible"
  },
  {
    "key": "ctrl+m",
    "command": "keybindings.editor.defineKeybinding",
    "when": "inKeybindings && keybindingFocus && !whenFocus"
  },
  {
    "key": "ctrl+m",
    "command": "list.closeFind",
    "when": "inputFocus && listFocus && treeFindOpen"
  },
  {
    "key": "ctrl+m",
    "command": "list.select",
    "when": "listFocus && !inputFocus && !treestickyScrollFocused"
  },
  {
    "key": "ctrl+m",
    "command": "list.select",
    "when": "listFocus && !inputFocus && !notebookCellListFocused"
  },
  {
    "key": "ctrl+m",
    "command": "list.stickyScrollselect",
    "when": "treestickyScrollFocused"
  },
  {
    "key": "ctrl+m",
    "command": "markdown.extension.onEnterKey",
    "when": "editorTextFocus && !editorHasMultipleSelections && !editorReadonly && !markdown.extension.editor.cursor.inFencedCodeBlock && !markdown.extension.editor.cursor.inMathEnv && !suggestWidgetVisible && vim.mode != 'CommandlineInProgress' && vim.mode != 'EasyMotionInputMode' && vim.mode != 'EasyMotionMode' && vim.mode != 'Normal' && vim.mode != 'Replace' && vim.mode != 'SearchInProgressMode' && vim.mode != 'SurroundInputMode' && vim.mode != 'Visual' && vim.mode != 'VisualBlock' && vim.mode != 'VisualLine' && editorLangId =~ /^markdown$|^rmd$|^quarto$/ || editorTextFocus && !editorHasMultipleSelections && !editorReadonly && !markdown.extension.editor.cursor.inFencedCodeBlock && !markdown.extension.editor.cursor.inMathEnv && config.editor.acceptSuggestionOnEnter == 'off' && vim.mode != 'CommandlineInProgress' && vim.mode != 'EasyMotionInputMode' && vim.mode != 'EasyMotionMode' && vim.mode != 'Normal' && vim.mode != 'Replace' && vim.mode != 'SearchInProgressMode' && vim.mode != 'SurroundInputMode' && vim.mode != 'Visual' && vim.mode != 'VisualBlock' && vim.mode != 'VisualLine' && editorLangId =~ /^markdown$|^rmd$|^quarto$/"
  },
  {
    "key": "ctrl+m",
    "command": "notebook.cell.chat.accept",
    "when": "inlineChatFocused && notebookCellChatFocused && !notebookCellEditorFocused"
  },
  {
    "key": "ctrl+m",
    "command": "notification.toggle",
    "when": "notificationFocus"
  },
  {
    "key": "ctrl+m",
    "command": "problems.action.open",
    "when": "problemFocus"
  },
  {
    "key": "ctrl+m",
    "command": "python.execInInteractiveWindowEnter",
    "when": "isCompositeNotebook && !config.interactiveWindow.executeWithShiftEnter && !inlineChatFocused && !notebookCellListFocused && activeEditor == 'workbench.editor.interactive'"
  },
  {
    "key": "ctrl+m",
    "command": "python.execInREPLEnter",
    "when": "isCompositeNotebook && !config.interactiveWindow.executeWithShiftEnter && !inlineChatFocused && !notebookCellListFocused && activeEditor == 'workbench.editor.repl'"
  },
  {
    "key": "ctrl+m",
    "command": "repl.execute",
    "when": "isCompositeNotebook && !config.interactiveWindow.executeWithShiftEnter && !notebookCellListFocused && activeEditor == 'workbench.editor.repl'"
  },
  {
    "key": "ctrl+m",
    "command": "revealReference",
    "when": "listFocus && referenceSearchVisible && !inputFocus && !treeElementCanCollapse && !treeElementCanExpand && !treestickyScrollFocused"
  },
  {
    "key": "ctrl+m",
    "command": "search.action.openResult",
    "when": "fileMatchOrMatchFocus && searchViewletVisible"
  },
  {
    "key": "ctrl+m",
    "command": "settings.action.focusSettingControl",
    "when": "inSettingsEditor && settingRowFocus"
  },
  {
    "key": "ctrl+m",
    "command": "settings.action.focusSettingsList",
    "when": "inSettingsEditor && settingsTocRowFocus"
  },
  {
    "key": "ctrl+m",
    "command": "workbench.action.chat.submit",
    "when": "chatInputHasText && chatRequestIsPaused && inChatInput && chatMode == 'ask' || chatInputHasText && inChatInput && !chatSessionRequestInProgress && chatMode == 'ask' || chatInstructionsAttached && chatRequestIsPaused && inChatInput && chatMode == 'ask' || chatInstructionsAttached && inChatInput && !chatSessionRequestInProgress && chatMode == 'ask'"
  },
  {
    "key": "ctrl+m",
    "command": "workbench.action.edits.submit",
    "when": "chatInputHasText && chatRequestIsPaused && inChatInput && chatMode != 'ask' || chatInputHasText && inChatInput && !chatSessionRequestInProgress && chatMode != 'ask' || chatInstructionsAttached && chatRequestIsPaused && inChatInput && chatMode != 'ask' || chatInstructionsAttached && inChatInput && !chatSessionRequestInProgress && chatMode != 'ask'"
  },
  {
    "key": "ctrl+m",
    "command": "workbench.action.terminal.acceptSelectedSuggestionEnter",
    "when": "terminalFocus && terminalHasBeenCreated && terminalIsOpen && terminalSuggestWidgetVisible && config.terminal.integrated.suggest.runOnEnter != 'ignore' || terminalFocus && terminalIsOpen && terminalProcessSupported && terminalSuggestWidgetVisible && config.terminal.integrated.suggest.runOnEnter != 'ignore'"
  },
  // [C] 元々"enter"にも割り当てられていないもの
  // quick open
  { // 確定
    "key": "ctrl+m",
    "command": "workbench.action.acceptSelectedQuickOpenItem",
    "when": "inQuickOpen"
  },
  // 検索
  { // 次の候補へ
    "key": "ctrl+m",
    "command": "editor.action.nextMatchFindAction",
    "when": "findInputFocussed"
  },
  { // 次の置換へ
    "key": "ctrl+m",
    "command": "editor.action.replaceOne",
    "when": "replaceInputFocussed"
  },
  // [D] "ctrl+g"を軒並み"ESC"と同じ動作にする
  {
    "key": "ctrl+g",
    "command": "calva.clearInlineResults",
    "when": "calva:hasInlineResults && calva:keybindingsEnabled && editorTextFocus && !editorHasMultipleSelections && !editorHasSelection && !editorReadOnly && !hasOtherSuggestions && !inlineSuggestionVisible && !parameterHintsVisible && !selectionAnchorSet && !suggestWidgetVisible && editorLangId == 'clojure'"
  },
  {
    "key": "ctrl+g",
    "command": "editor.action.cancelSelectionAnchor",
    "when": "editorTextFocus && selectionAnchorSet"
  },
  {
    "key": "ctrl+g",
    "command": "workbench.action.chat.stopListening",
    "when": "voiceChatInProgress && scopedVoiceChatInProgress == 'editor' || voiceChatInProgress && scopedVoiceChatInProgress == 'inline' || voiceChatInProgress && scopedVoiceChatInProgress == 'quick' || voiceChatInProgress && scopedVoiceChatInProgress == 'view'"
  },
  {
    "key": "ctrl+g",
    "command": "workbench.action.speech.stopReadAloud",
    "when": "scopedChatSynthesisInProgress && textToSpeechInProgress"
  },
  {
    "key": "ctrl+g",
    "command": "editor.debug.action.closeExceptionWidget",
    "when": "exceptionWidgetVisible"
  },
  {
    "key": "ctrl+g",
    "command": "editor.action.inlineSuggest.hide",
    "when": "inInlineEditsPreviewEditor"
  },
  {
    "key": "ctrl+g",
    "command": "editor.action.inlineSuggest.hide",
    "when": "inlineEditIsVisible || inlineSuggestionVisible"
  },
  {
    "key": "ctrl+g",
    "command": "editor.action.hideColorPicker",
    "when": "standaloneColorPickerVisible"
  },
  {
    "key": "ctrl+g",
    "command": "workbench.action.terminal.chat.close",
    "when": "chatIsEnabled && terminalChatFocus && terminalChatVisible || chatIsEnabled && terminalChatVisible && terminalFocus"
  },
  {
    "key": "ctrl+g",
    "command": "inlineChat2.stop",
    "when": "inlineChatHasEditsAgent && inlineChatVisible"
  },
  {
    "key": "ctrl+g",
    "command": "vscode-neovim.escape",
    "when": "editorTextFocus && neovim.init && !dirtyDiffVisible && !findWidgetVisible && !inReferenceSearchEditor && !markersNavigationVisible && !notebookCellFocused && !notificationCenterVisible && !parameterHintsVisible && !referenceSearchVisible && neovim.mode == 'normal' && editorLangId not in 'neovim.editorLangIdExclusions'"
  },
  {
    "key": "ctrl+g",
    "command": "vscode-neovim.escape",
    "when": "editorTextFocus && neovim.init && neovim.mode != 'normal' && editorLangId not in 'neovim.editorLangIdExclusions'"
  },
  {
    "key": "ctrl+g",
    "command": "noteMultiCursor.exit",
    "when": "config.notebook.multiCursor.enabled && isNotebookMultiSelect && activeEditor == 'workbench.editor.notebook'"
  },
  {
    "key": "ctrl+g",
    "command": "notebook.cell.quitEdit",
    "when": "inputFocus && notebookEditorFocused && !editorHasMultipleSelections && !editorHasSelection && !editorHoverVisible && !inlineChatFocused"
  },
  {
    "key": "ctrl+g",
    "command": "notebook.cell.quitEdit",
    "when": "notebookEditorFocused && notebookOutputFocused"
  },
  {
    "key": "ctrl+g",
    "command": "notifications.hideList",
    "when": "notificationCenterVisible"
  },
  {
    "key": "ctrl+g",
    "command": "settings.action.clearSearchResults",
    "when": "inSettingsEditor && inSettingsSearch"
  },
  {
    "key": "ctrl+g",
    "command": "settings.action.focusLevelUp",
    "when": "inSettingsEditor && !inSettingsJSONEditor && !inSettingsSearch"
  },
  {
    "key": "ctrl+g",
    "command": "search.action.focusQueryEditorWidget",
    "when": "inSearchEditor"
  },
  {
    "key": "ctrl+g",
    "command": "search.action.cancel",
    "when": "listFocus && searchViewletVisible && !inputFocus && !treestickyScrollFocused && searchState != '0'"
  },
  {
    "key": "ctrl+g",
    "command": "inlayHints.stopReadingLineWithHint",
    "when": "isReadingLineWithInlayHints"
  },
  {
    "key": "ctrl+g",
    "command": "workbench.action.terminal.clearSelection",
    "when": "terminalFocusInAny && terminalHasBeenCreated && terminalTextSelected && !terminalFindVisible || terminalFocusInAny && terminalProcessSupported && terminalTextSelected && !terminalFindVisible"
  },
  {
    "key": "ctrl+g",
    "command": "workbench.action.terminal.hideFind",
    "when": "terminalFindVisible && terminalFocusInAny && terminalHasBeenCreated || terminalFindVisible && terminalFocusInAny && terminalProcessSupported"
  },
  {
    "key": "ctrl+g",
    "command": "workbench.action.editorDictation.stop",
    "when": "editorDictation.inProgress"
  },
  {
    "key": "ctrl+g",
    "command": "welcome.goBack",
    "when": "inWelcome && activeEditor == 'gettingStartedPage'"
  },
  {
    "key": "ctrl+g",
    "command": "breadcrumbs.selectEditor",
    "when": "breadcrumbsActive && breadcrumbsVisible"
  },
  {
    "key": "ctrl+g",
    "command": "cancelLinkedEditingInput",
    "when": "LinkedEditingInputVisible && editorTextFocus"
  },
  {
    "key": "ctrl+g",
    "command": "cancelRenameInput",
    "when": "editorFocus && renameInputVisible"
  },
  {
    "key": "ctrl+g",
    "command": "cancelSelection",
    "when": "editorHasSelection && textInputFocus"
  },
  {
    "key": "ctrl+g",
    "command": "closeBreakpointWidget",
    "when": "breakpointWidgetVisible && textInputFocus"
  },
  {
    "key": "ctrl+g",
    "command": "closeFindWidget",
    "when": "editorFocus && findWidgetVisible && !isComposing"
  },
  {
    "key": "ctrl+g",
    "command": "closeMarkersNavigation",
    "when": "editorFocus && markersNavigationVisible"
  },
  {
    "key": "ctrl+g",
    "command": "closeParameterHints",
    "when": "editorFocus && parameterHintsVisible"
  },
  {
    "key": "ctrl+g",
    "command": "closeQuickDiff",
    "when": "dirtyDiffVisible"
  },
  {
    "key": "ctrl+g",
    "command": "closeReferenceSearch",
    "when": "inReferenceSearchEditor && !config.editor.stablePeek"
  },
  {
    "key": "ctrl+g",
    "command": "closeReferenceSearch",
    "when": "editorTextFocus && referenceSearchVisible && !config.editor.stablePeek || referenceSearchVisible && !config.editor.stablePeek && !inputFocus"
  },
  {
    "key": "ctrl+g",
    "command": "closeReplaceInFilesWidget",
    "when": "replaceInputBoxFocus && searchViewletVisible"
  },
  {
    "key": "ctrl+g",
    "command": "commentsClearFilterText",
    "when": "commentsFilterFocus"
  },
  {
    "key": "ctrl+g",
    "command": "diffEditor.exitCompareMove",
    "when": "comparingMovedCode"
  },
  {
    "key": "ctrl+g",
    "command": "editor.action.selectEditor",
    "when": "stickyScrollFocused"
  },
  {
    "key": "ctrl+g",
    "command": "editor.action.webvieweditor.hideFind",
    "when": "webviewFindWidgetVisible && !editorFocus && activeEditor == 'WebviewEditor'"
  },
  {
    "key": "ctrl+g",
    "command": "editor.cancelOperation",
    "when": "cancellableOperation"
  },
  {
    "key": "ctrl+g",
    "command": "editor.closeCallHierarchy",
    "when": "callHierarchyVisible && !config.editor.stablePeek"
  },
  {
    "key": "ctrl+g",
    "command": "editor.closeTestPeek",
    "when": "testing.isInPeek && !config.editor.stablePeek || testing.isPeekVisible && !config.editor.stablePeek"
  },
  {
    "key": "ctrl+g",
    "command": "editor.closeTypeHierarchy",
    "when": "typeHierarchyVisible && !config.editor.stablePeek"
  },
  {
    "key": "ctrl+g",
    "command": "editor.gotoNextSymbolFromResult.cancel",
    "when": "hasSymbols"
  },
  {
    "key": "ctrl+g",
    "command": "editor.hideDropWidget",
    "when": "dropWidgetVisible"
  },
  {
    "key": "ctrl+g",
    "command": "editor.hidePasteWidget",
    "when": "pasteWidgetVisible"
  },
  {
    "key": "ctrl+g",
    "command": "filesExplorer.cancelCut",
    "when": "explorerResourceCut && filesExplorerFocus && foldersViewVisible && !inputFocus"
  },
  {
    "key": "ctrl+g",
    "command": "hideCodeActionWidget",
    "when": "codeActionMenuVisible"
  },
  {
    "key": "ctrl+g",
    "command": "hideSuggestWidget",
    "when": "suggestWidgetVisible && textInputFocus"
  },
  {
    "key": "ctrl+g",
    "command": "inlineChat.close",
    "when": "inlineChatHasProvider && inlineChatVisible"
  },
  {
    "key": "ctrl+g",
    "command": "inlineChat.discardHunkChange",
    "when": "inlineChatHasProvider && inlineChatVisible && inlineChatResponseType == 'messagesAndEdits'"
  },
  {
    "key": "ctrl+g",
    "command": "inlineChat.hideHint",
    "when": "inlineChatShowingHint"
  },
  {
    "key": "ctrl+g",
    "command": "interactive.input.clear",
    "when": "isCompositeNotebook && !LinkedEditingInputVisible && !accessibilityHelpWidgetVisible && !breakpointWidgetVisible && !editorHasMultipleSelections && !editorHasSelection && !editorHoverVisible && !exceptionWidgetVisible && !findWidgetVisible && !inSnippetMode && !inlineChatVisible && !isComposing && !markersNavigationVisible && !notebookEditorFocused && !notificationToastsVisible && !parameterHintsVisible && !renameInputVisible && !selectionAnchorSet && !suggestWidgetVisible"
  },
  {
    "key": "ctrl+g",
    "command": "keybindings.editor.clearSearchResults",
    "when": "inKeybindings && inKeybindingsSearch"
  },
  {
    "key": "ctrl+g",
    "command": "keybindings.editor.rejectWhenExpression",
    "when": "inKeybindings && whenFocus && !suggestWidgetVisible"
  },
  {
    "key": "ctrl+g",
    "command": "leaveEditorMessage",
    "when": "messageVisible"
  },
  {
    "key": "ctrl+g",
    "command": "leaveSnippet",
    "when": "inSnippetMode && textInputFocus"
  },
  {
    "key": "ctrl+g",
    "command": "list.clear",
    "when": "listFocus && listHasSelectionOrFocus && !inputFocus && !treestickyScrollFocused"
  },
  {
    "key": "ctrl+g",
    "command": "list.closeFind",
    "when": "listFocus && treeFindOpen"
  },
  {
    "key": "ctrl+g",
    "command": "notebook.cell.chat.acceptChanges",
    "when": "inlineChatFocused && notebookCellChatFocused && notebookChatUserDidEdit && !notebookCellEditorFocused"
  },
  {
    "key": "ctrl+g",
    "command": "notebook.cell.chat.discard",
    "when": "inlineChatFocused && notebookCellChatFocused && !notebookCellEditorFocused && !notebookChatUserDidEdit"
  },
  {
    "key": "ctrl+g",
    "command": "notebook.hideFind",
    "when": "notebookEditorFocused && notebookFindWidgetFocused"
  },
  {
    "key": "ctrl+g",
    "command": "notifications.hideToasts",
    "when": "notificationToastsVisible"
  },
  {
    "key": "ctrl+g",
    "command": "notifications.hideToasts",
    "when": "notificationFocus && notificationToastsVisible"
  },
  {
    "key": "ctrl+g",
    "command": "problems.action.clearFilterText",
    "when": "problemsFilterFocus"
  },
  {
    "key": "ctrl+g",
    "command": "removeSecondaryCursors",
    "when": "editorHasMultipleSelections && textInputFocus"
  },
  {
    "key": "ctrl+g",
    "command": "scm.clearInput",
    "when": "scmRepository && !editorHasSelection && !suggestWidgetVisible"
  },
  {
    "key": "ctrl+g",
    "command": "workbench.action.chat.stopReadChatItemAloud",
    "when": "scopedChatSynthesisInProgress"
  },
  {
    "key": "ctrl+g",
    "command": "workbench.action.closeQuickOpen",
    "when": "inQuickOpen"
  },
  {
    "key": "ctrl+g",
    "command": "workbench.action.hideComment",
    "when": "commentEditorFocused || commentFocused"
  },
  {
    "key": "ctrl+g",
    "command": "workbench.action.terminal.hideSuggestWidget",
    "when": "terminalFocus && terminalHasBeenCreated && terminalIsOpen && terminalSuggestWidgetVisible || terminalFocus && terminalIsOpen && terminalProcessSupported && terminalSuggestWidgetVisible"
  },
  {
    "key": "ctrl+g",
    "command": "workbench.actions.workbench.panel.output.clearFilterText",
    "when": "outputFilterFocus"
  },
  {
    "key": "ctrl+g",
    "command": "workbench.banner.focusBanner",
    "when": "bannerFocused"
  },
  {
    "key": "ctrl+g",
    "command": "workbench.statusBar.clearFocus",
    "when": "statusBarFocused"
  }
]
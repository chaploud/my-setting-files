// Place your key bindings in this file to override the defaults
[
  // Recenter Top Bottom
  {
    "key": "ctrl+l",
    "command": "recenterTopBottom",
    "when": "textInputFocus"
  },
  // Markdown All in One
  // ,,でチェックボックスをトグル
  {
    "key": ", ,",
    "command": "markdown.extension.checkTaskList",
    "when": "editorTextFocus && editorLangId =~ /^markdown$|^rmd$|^quarto$/"
  },
  // ===== VSCode NeoVim =====
  // Which Key
  {
    "key": "space",
    "command": "whichkey.show",
    "when": "editorTextFocus && neovim.init && (neovim.mode == normal || neovim.mode == visual)"
  },
  // ctrl+d, ctrl+uの挙動修正
  {
    "key": "ctrl+d",
    "command": "vscode-neovim.send",
    "args": "<C-d>",
    "when": "editorTextFocus && neovim.init"
  },
  {
    "key": "ctrl+u",
    "command": "vscode-neovim.send",
    "args": "<C-u>",
    "when": "editorTextFocus && neovim.init"
  },
  // Normal Modeでのctrl+zによるUndoの挙動
  {
    "key": "ctrl+z",
    "command": "vscode-neovim.send",
    "args": "u",
    "when": "editorTextFocus && neovim.init && neovim.mode == 'normal'"
  },
  // "ctrl+m" を "enter" として振舞わせたい
  // [A] 余計な"ctrl+m"を解除
  {
    "key": "ctrl+m",
    "command": "-editor.action.toggleTabFocusMode"
  },
  // [B] "enter" でkeybindingsを検索して出てきたものに、"ctrl+m"も割り当てる
  // デフォルトのABC順(大文字→小文字)でその都度過不足があれば修正していく
  {
    "key": "ctrl+m",
    "command": "repl.action.acceptInput",
    "when": "inDebugRepl && textInputFocus"
  },
  {
    "key": "ctrl+m",
    "command": "editor.action.nextMatchFindAction",
    "when": "editorFocus && findInputFocussed"
  },
  {
    "key": "ctrl+m",
    "command": "editor.action.insertColorWithStandaloneColorPicker",
    "when": "standaloneColorPickerFocused"
  },
  {
    "key": "ctrl+m",
    "command": "notebook.cell.edit",
    "when": "notebookCellListFocused && !editorHoverFocused && !inputFocus && !notebookOutputInputFocused"
  },
  {
    "key": "ctrl+m",
    "command": "workbench.action.terminal.findPrevious",
    "when": "terminalFindInputFocused && terminalHasBeenCreated || terminalFindInputFocused && terminalProcessSupported"
  },
  {
    "key": "ctrl+m",
    "command": "acceptRenameInput",
    "when": "editorFocus && renameInputVisible && !isComposing"
  },
  {
    "key": "ctrl+m",
    "command": "acceptSelectedCodeAction",
    "when": "codeActionMenuVisible"
  },
  {
    "key": "ctrl+m",
    "command": "acceptSelectedSuggestion",
    "when": "acceptSuggestionOnEnter && suggestWidgetHasFocusedSuggestion && suggestWidgetVisible && suggestionMakesTextEdit && textInputFocus"
  },
  {
    "key": "ctrl+m",
    "command": "breadcrumbs.selectFocused",
    "when": "breadcrumbsActive && breadcrumbsVisible"
  },
  {
    "key": "ctrl+m",
    "command": "breakpointWidget.action.acceptInput",
    "when": "breakpointWidgetVisible && inBreakpointWidget"
  },
  {
    "key": "ctrl+m",
    "command": "calva.evaluateReplWindowForm",
    "when": "calva:keybindingsEnabled && calva:outputWindowActive && calva:replWindowSubmitOnEnter && editorTextFocus && !suggestWidgetVisible"
  },
  {
    "key": "ctrl+m",
    "command": "editor.action.extensioneditor.findNext",
    "when": "webviewFindWidgetFocused && !editorFocus && activeEditor == 'workbench.editor.extension'"
  },
  {
    "key": "ctrl+m",
    "command": "editor.action.goToFocusedStickyScrollLine",
    "when": "stickyScrollFocused"
  },
  {
    "key": "ctrl+m",
    "command": "editor.action.replaceOne",
    "when": "editorFocus && findWidgetVisible && replaceInputFocussed"
  },
  {
    "key": "ctrl+m",
    "command": "editor.action.webvieweditor.findNext",
    "when": "webviewFindWidgetFocused && !editorFocus && activeEditor == 'WebviewEditor'"
  },
  {
    "key": "ctrl+m",
    "command": "explorer.openAndPassFocus",
    "when": "filesExplorerFocus && foldersViewVisible && !explorerResourceIsFolder && !inputFocus"
  },
  {
    "key": "ctrl+m",
    "command": "iconSelectBox.selectFocused",
    "when": "iconSelectBoxFocus"
  },
  {
    "key": "ctrl+m",
    "command": "interactive.execute",
    "when": "isCompositeNotebook && !config.interactiveWindow.executeWithShiftEnter && activeEditor == 'workbench.editor.interactive'"
  },
  {
    "key": "ctrl+m",
    "command": "keybindings.editor.acceptWhenExpression",
    "when": "inKeybindings && whenFocus && !suggestWidgetVisible"
  },
  {
    "key": "ctrl+m",
    "command": "keybindings.editor.defineKeybinding",
    "when": "inKeybindings && keybindingFocus && !whenFocus"
  },
  {
    "key": "ctrl+m",
    "command": "list.closeFind",
    "when": "inputFocus && listFocus && treeFindOpen"
  },
  {
    "key": "ctrl+m",
    "command": "list.select",
    "when": "listFocus && !inputFocus && !treestickyScrollFocused"
  },
  {
    "key": "ctrl+m",
    "command": "list.select",
    "when": "listFocus && !inputFocus && !notebookCellListFocused"
  },
  {
    "key": "ctrl+m",
    "command": "list.stickyScrollselect",
    "when": "treestickyScrollFocused"
  },
  {
    "key": "ctrl+m",
    "command": "markdown.extension.onEnterKey",
    "when": "editorTextFocus && !editorHasMultipleSelections && !editorReadonly && !markdown.extension.editor.cursor.inFencedCodeBlock && !markdown.extension.editor.cursor.inMathEnv && !suggestWidgetVisible && vim.mode != 'CommandlineInProgress' && vim.mode != 'EasyMotionInputMode' && vim.mode != 'EasyMotionMode' && vim.mode != 'Normal' && vim.mode != 'Replace' && vim.mode != 'SearchInProgressMode' && vim.mode != 'SurroundInputMode' && vim.mode != 'Visual' && vim.mode != 'VisualBlock' && vim.mode != 'VisualLine' && editorLangId =~ /^markdown$|^rmd$|^quarto$/ || editorTextFocus && !editorHasMultipleSelections && !editorReadonly && !markdown.extension.editor.cursor.inFencedCodeBlock && !markdown.extension.editor.cursor.inMathEnv && config.editor.acceptSuggestionOnEnter == 'off' && vim.mode != 'CommandlineInProgress' && vim.mode != 'EasyMotionInputMode' && vim.mode != 'EasyMotionMode' && vim.mode != 'Normal' && vim.mode != 'Replace' && vim.mode != 'SearchInProgressMode' && vim.mode != 'SurroundInputMode' && vim.mode != 'Visual' && vim.mode != 'VisualBlock' && vim.mode != 'VisualLine' && editorLangId =~ /^markdown$|^rmd$|^quarto$/"
  },
  {
    "key": "ctrl+m",
    "command": "notebook.cell.chat.accept",
    "when": "inlineChatFocused && notebookCellChatFocused && !notebookCellEditorFocused"
  },
  {
    "key": "ctrl+m",
    "command": "notification.toggle",
    "when": "notificationFocus"
  },
  {
    "key": "ctrl+m",
    "command": "problems.action.open",
    "when": "problemFocus"
  },
  {
    "key": "ctrl+m",
    "command": "python.execInInteractiveWindowEnter",
    "when": "isCompositeNotebook && !config.interactiveWindow.executeWithShiftEnter && !inlineChatFocused && !notebookCellListFocused && activeEditor == 'workbench.editor.interactive'"
  },
  {
    "key": "ctrl+m",
    "command": "python.execInREPLEnter",
    "when": "isCompositeNotebook && !config.interactiveWindow.executeWithShiftEnter && !inlineChatFocused && !notebookCellListFocused && activeEditor == 'workbench.editor.repl'"
  },
  {
    "key": "ctrl+m",
    "command": "repl.execute",
    "when": "isCompositeNotebook && !config.interactiveWindow.executeWithShiftEnter && !notebookCellListFocused && activeEditor == 'workbench.editor.repl'"
  },
  {
    "key": "ctrl+m",
    "command": "revealReference",
    "when": "listFocus && referenceSearchVisible && !inputFocus && !treeElementCanCollapse && !treeElementCanExpand && !treestickyScrollFocused"
  },
  {
    "key": "ctrl+m",
    "command": "search.action.openResult",
    "when": "fileMatchOrMatchFocus && searchViewletVisible"
  },
  {
    "key": "ctrl+m",
    "command": "settings.action.focusSettingControl",
    "when": "inSettingsEditor && settingRowFocus"
  },
  {
    "key": "ctrl+m",
    "command": "settings.action.focusSettingsList",
    "when": "inSettingsEditor && settingsTocRowFocus"
  },
  {
    "key": "ctrl+m",
    "command": "workbench.action.chat.submit",
    "when": "chatInputHasText && chatRequestIsPaused && inChatInput && chatMode == 'ask' || chatInputHasText && inChatInput && !chatSessionRequestInProgress && chatMode == 'ask' || chatInstructionsAttached && chatRequestIsPaused && inChatInput && chatMode == 'ask' || chatInstructionsAttached && inChatInput && !chatSessionRequestInProgress && chatMode == 'ask'"
  },
  {
    "key": "ctrl+m",
    "command": "workbench.action.edits.submit",
    "when": "chatInputHasText && chatRequestIsPaused && inChatInput && chatMode != 'ask' || chatInputHasText && inChatInput && !chatSessionRequestInProgress && chatMode != 'ask' || chatInstructionsAttached && chatRequestIsPaused && inChatInput && chatMode != 'ask' || chatInstructionsAttached && inChatInput && !chatSessionRequestInProgress && chatMode != 'ask'"
  },
  {
    "key": "ctrl+m",
    "command": "workbench.action.terminal.acceptSelectedSuggestionEnter",
    "when": "terminalFocus && terminalHasBeenCreated && terminalIsOpen && terminalSuggestWidgetVisible && config.terminal.integrated.suggest.runOnEnter != 'ignore' || terminalFocus && terminalIsOpen && terminalProcessSupported && terminalSuggestWidgetVisible && config.terminal.integrated.suggest.runOnEnter != 'ignore'"
  },
  // [C] 元々"enter"にも割り当てられていないもの
  // quick open
  { // 確定
    "key": "ctrl+m",
    "command": "workbench.action.acceptSelectedQuickOpenItem",
    "when": "inQuickOpen"
  },
  { // ESC
    "key": "ctrl+g",
    "command": "workbench.action.closeQuickOpen",
    "when": "inQuickOpen"
  },
  // 検索
  { // 次の候補へ
    "key": "ctrl+m",
    "command": "editor.action.nextMatchFindAction",
    "when": "findInputFocussed"
  },
  { // 次の置換へ
    "key": "ctrl+m",
    "command": "editor.action.replaceOne",
    "when": "replaceInputFocussed"
  },
  { // ESC
    "key": "ctrl+g",
    "command": "closeFindWidget",
    "when": "findInputFocussed || replaceInputFocussed"
  }
]
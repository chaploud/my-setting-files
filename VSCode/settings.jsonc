{
  // エディタ基本設定
  "editor.fontFamily": "'Source Han Code JP','Droid Sans Mono', 'monospace', monospace",
  "editor.fontSize": 14,
  "editor.cursorBlinking": "phase",
  "editor.formatOnPaste": true,
  "editor.formatOnSave": true,
  "editor.minimap.enabled": false,
  "editor.occurrencesHighlight": "off",
  "editor.renderWhitespace": "all",
  "editor.selectionHighlight": false,
  "editor.tabSize": 2,
  "editor.tokenColorCustomizations": {
    "comments": "#2aa1ae"
  },
  // 空のフォルダを一列にしてしまわない
  "explorer.compactFolders": false,
  "files.trimTrailingWhitespace": true,
  // Emacsキーバインドをターミナルでも有効に使いたい
  "terminal.integrated.allowChords": false,
  "terminal.integrated.commandsToSkipShell": [
    "-workbench.action.toggleSidebarVisibility",
    "-workbench.action.terminal.focusFind",
    "-workbench.action.quickOpen",
    "-workbench.action.quickOpenNavigateNextInFilePicker",
    "-editor.action.toggleTabFocusMode"
  ],
  "terminal.integrated.scrollback": 10000,
  "terminal.integrated.persistentSessionReviveProcess": "never",
  // Git関連の設定
  "git.autofetch": true,
  "git.enableSmartCommit": true,
  "git.confirmSync": false,
  "git.openRepositoryInParentFolders": "never",
  // 文字検索時に大文字小文字を都合よく検索する
  "search.smartCase": true,
  "search.useGlobalIgnoreFiles": true,
  "search.useParentIgnoreFiles": true,
  // プラットフォームごとにキーバインドを分けない
  "settingsSync.keybindingsPerPlatform": false,
  "security.workspace.trust.untrustedFiles": "open",
  //  ===== デフォルトフォーマッタ =====
  "[jsonc]": {
    "editor.defaultFormatter": "vscode.json-language-features"
  },
  // ===== 以下は拡張機能の設定 =====
  // Color Theme (GitHub Dark Default)
  "workbench.colorTheme": "GitHub Dark Default",
  "workbench.colorCustomizations": {
    "[GitHub Dark Default]": {
      "panel.background": "#0d1117", // 下部パネルの背景色
      "sideBar.background": "#0a0c10", // サイドバーの背景色
      "sideBarSectionHeader.background": "#07080a", // サイドバーのセクションヘッダーの背景色
      "textPreformat.background": "#6e768144", // コードの背景色
      "textPreformat.foreground": "#f0883e", // コードの文字色
      "peekViewEditorStickyScroll.background": "#0d1117"
    }
  },
  // vscode-icons
  "workbench.iconTheme": "vscode-icons",
  // Path Intellisense
  "path-intellisense.autoTriggerNextSuggestion": true,
  // Database Client
  "database-client.autoSync": true,
  // Remote SSH
  "remote.SSH.remotePlatform": {
    "dev-almalinux": "linux",
    "gpu-ubuntu": "linux",
    "mac-mini": "macOS"
  },
  "remote.SSH.enableAgentForwarding": true,
  // GitHub Copilot
  "github.copilot.enable": {
    "scminput": true,
    "markdown": true,
    "plaintext": true
  },
  // GitHub Copilot Chat
  "github.copilot.chat.localeOverride": "ja",
  // Todo Tree
  "todo-tree.tree.showCountsInTree": true,
  "todo-tree.tree.expanded": true,
  "todo-tree.tree.scanMode": "workspace only",
  "todo-tree.highlights.highlightDelay": 100,
  "todo-tree.general.tags": [
    "TODO",
    "NOTE",
    "FIXME",
    "XXX"
  ],
  "todo-tree.highlights.useColourScheme": true,
  "todo-tree.highlights.backgroundColourScheme": [
    "F2CC60",
    "79C0FF",
    "DB61A2",
    "F85149"
  ],
  "todo-tree.highlights.foregroundColourScheme": [
    "black",
    "black",
    "white",
    "white"
  ],
  // VSCode NeoVim
  "extensions.experimental.affinity": {
    "asvetliakov.vscode-neovim": 1
  },
  "vscode-neovim.compositeKeys": {
    "fd": {
      "command": "vscode-neovim.escape"
    }
  },
  "vscode-neovim.ctrlKeysForInsertMode": [
    "a", // 行頭に移動
    "b", // 1文字戻る
    "d", // delete
    "e", // 行末に移動
    "f", // 1文字進む
    "g", // ESC
    "p", // カーソルを上に移動
    "h", // backspace
    "k", // カーソルから行末まで削除
    "m", // Enter
    "n", // カーソルを下に移動
    "w", // 1単語削除
    "y" // 貼り付け
  ],
  "vscode-neovim.ctrlKeysForNormalMode": [
    "a", // 数字を1増やす
    "d", // 画面半分下にスクロール
    "e", // カーソルを移動せず画面を下にスクロール
    "g", // ESC
    "h", // backspace
    "m", // Enter
    "o", // 前の場所に戻る
    "r", // Redo
    "t", // 元の場所に戻る
    "u", // 画面半分上にスクロール
    "v", // 矩形選択
    "w", // ウィンドウ操作
    "x", // decrement
    "y", // カーソルを移動せず画面を上にスクロール
    "/", // コメントアウト
    "]" // 定義ジャンプ
  ],
  // Calva
  "calva.enableInspectorRainbow": true,
  "calva.useLegacyReplWindowPath": false,
  "calva.outputDestinations": {
    "evalResults": "repl-window",
    "evalOutput": "repl-window",
    "otherOutput": "repl-window"
  },
  "calva.paredit.killAlsoCutsToClipboard": true,
  // Code Runner
  "code-runner.runInTerminal": true,
  "code-runner.saveFileBeforeRun": true,
  "code-runner.clearPreviousOutput": true,
  "code-runner.showExecutionMessage": false,
  "code-runner.showRunCommandInEditorContextMenu": false,
  "code-runner.showRunCommandInExplorerContextMenu": false,
  "code-runner.executorMap": {
    "javascript": "bun",
    "typescript": "bun"
  },
  // Which Key
  "whichkey.delay": 300,
  "whichkey.bindings": [
    {
      "key": "n",
      "name": "Next marker",
      "type": "command",
      "command": "editor.action.marker.nextInFiles"
    },
    {
      "key": "p",
      "name": "Previous marker",
      "type": "command",
      "command": "editor.action.marker.prevInFiles"
    },
    {
      "key": "N",
      "name": "Next diff",
      "type": "command",
      "command": "editor.action.dirtydiff.next"
    },
    {
      "key": "P",
      "name": "Previous diff",
      "type": "command",
      "command": "editor.action.dirtydiff.previous"
    },
    {
      "key": "d",
      "name": "Debug start",
      "type": "command",
      "command": "workbench.action.debug.start"
    },
    {
      "key": "D",
      "name": "Debug run",
      "type": "command",
      "command": "workbench.action.debug.run"
    },
    {
      "key": "i",
      "name": "Inspect TM scopes",
      "type": "command",
      "command": "editor.action.inspectTMScopes"
    },
    {
      "key": "e",
      "name": "Execute current file",
      "type": "command",
      "command": "code-runner.run"
    },
    {
      "key": "s",
      "name": "Clojure",
      "type": "bindings",
      "bindings": [
        {
          "key": "l",
          "name": "Move cursor to list end",
          "type": "command",
          "command": "paredit.closeList"
        },
        {
          "key": "i",
          "name": "(Re)Start a project REPL and connect (Jack-In)",
          "type": "command",
          "command": "calva.jackIn"
        },
        {
          "key": "e",
          "name": "Evaluate entire file",
          "type": "command",
          "command": "calva.loadFile"
        },
        {
          "key": "r",
          "name": "Show REPL window",
          "type": "command",
          "command": "calva.showReplWindow"
        },
        {
          "key": "k",
          "name": "Stop/Kill the project REPL started by Calva (Jack-Out)",
          "command": "calva.jackOut"
        },
        {
          "key": "b",
          "name": "Barf forwards",
          "type": "command",
          "command": "paredit.barfSexpForward"
        },
        {
          "key": "B",
          "name": "Barf backwards",
          "type": "command",
          "command": "paredit.barfSexpBackward"
        },
        {
          "key": "s",
          "name": "Slurp forwards",
          "type": "command",
          "command": "paredit.slurpSexpForward"
        },
        {
          "key": "S",
          "name": "Slurp backwards",
          "type": "command",
          "command": "paredit.slurpSexpBackward"
        },
        {
          "key": "d",
          "name": "Delete",
          "type": "bindings",
          "bindings": [
            {
              "key": "h",
              "name": "Delete to start of list",
              "type": "command",
              "command": "paredit.killListBackward"
            },
            {
              "key": "l",
              "name": "Delete to end of list",
              "type": "command",
              "command": "paredit.killListForward"
            },
            {
              "key": "k",
              "name": "Delete parent and raise children",
              "type": "command",
              "command": "paredit.raiseSexp"
            }
          ]
        },
        {
          "key": "w",
          "name": "Wrap",
          "type": "bindings",
          "bindings": [
            {
              "key": "(",
              "name": "Wrap with ()",
              "type": "command",
              "command": "paredit.wrapAroundParens"
            },
            {
              "key": "[",
              "name": "Wrap with []",
              "type": "command",
              "command": "paredit.wrapAroundSquare"
            },
            {
              "key": "{",
              "name": "Wrap with {}",
              "type": "command",
              "command": "paredit.wrapAroundCurly"
            },
            {
              "key": "\"",
              "name": "Wrap with \"\"",
              "type": "command",
              "command": "paredit.wrapAroundQuote"
            }
          ]
        }
      ]
    }
  ]
}
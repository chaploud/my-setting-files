{
  // エディタ基本設定
  // フォント
  "editor.fontFamily": "'Source Han Code JP', 'UDEV Gothic 35NFLG', 'Droid Sans Mono', 'monospace', monospace",
  "editor.fontSize": 15,
  "terminal.integrated.fontSize": 15,
  "editor.lineNumbers": "off",
  // カーソルがいい感じに点滅する
  "editor.cursorBlinking": "phase",
  // スクロールがなめらかになる
  "editor.smoothScrolling": true,
  // カーソルの移動がアニメーション風になる
  "editor.cursorSmoothCaretAnimation": "on",
  // 貼り付け時にフォーマット指定があれば適用する
  "editor.formatOnPaste": true,
  // 保存時にフォーマット指定があれば適用する
  "editor.formatOnSave": true,
  // ミニマップは領域を圧迫するので消す
  "editor.minimap.enabled": false,
  // スペースを可視化する
  "editor.renderWhitespace": "all",
  // 選択した語と一致する他の箇所のハイライトは不要
  "editor.selectionHighlight": false,
  // カーソル下の語と一致する他の箇所のハイライトは不要
  "editor.occurrencesHighlight": "off",
  // コメントの色が薄すぎるので主張しすぎず見えやすい色にする
  "editor.tokenColorCustomizations": {
    "comments": "#2aa1ae"
  },
  // NeoVimとの相性(日本語入力で上書されてしまう)への対処
  "editor.experimentalEditContextEnabled": false,
  // 言語によるタブサイズの設定
  "editor.tabSize": 2,
  "[zig]": {
    "editor.tabSize": 4
  },
  "[cpp]": {
    "editor.tabSize": 4
  },
  "[c]": {
    "editor.tabSize": 4
  },
  "[php]": {
    "editor.tabSize": 4
  },
  // 初回のスタートアップ画面は表示しない
  "workbench.startupEditor": "none",
  // 空のフォルダを省略して一列にしてしまわない(必ずツリー表示にする)
  "explorer.compactFolders": false,
  // 保存時に行末の空白など不要な空白を削除する
  "files.trimTrailingWhitespace": true,
  // Emacsキーバインドをターミナルでも有効に使いたい
  "terminal.integrated.allowChords": false,
  "terminal.integrated.commandsToSkipShell": [
    "-workbench.action.toggleSidebarVisibility",
    "-workbench.action.terminal.focusFind",
    "-workbench.action.quickOpen",
    "-workbench.action.quickOpenNavigateNextInFilePicker",
    "-editor.action.toggleTabFocusMode"
  ],
  // ターミナルのスクロールバックをたくさんできるようにする
  "terminal.integrated.scrollback": 10000,
  // VSCodeを終了した後、前回のプロセスを復元しない
  "terminal.integrated.persistentSessionReviveProcess": "never",
  // デバッグ開始時に自動でデバッグコンソールを開かない
  "debug.internalConsoleOptions": "neverOpen",
  // Git関連の設定
  "git.autofetch": true,
  "git.enableSmartCommit": true,
  "git.confirmSync": false,
  "git.openRepositoryInParentFolders": "never",
  "github.gitProtocol": "ssh",
  // 変更点の強調
  "scm.diffDecorationsGutterPattern": {
    "added": false,
    "modified": false
  },
  // 文字検索時に大文字小文字を都合よく検索する
  "search.smartCase": true,
  "search.useGlobalIgnoreFiles": true,
  "search.useParentIgnoreFiles": true,
  // プラットフォームごとにキーバインドを分けない
  "settingsSync.keybindingsPerPlatform": false,
  // 信頼されたワークスペースを開いているならば、信頼されていないファイルを開くときに警告を出さない
  "security.workspace.trust.untrustedFiles": "open",
  //  ===== デフォルトフォーマッタ =====
  "[jsonc]": {
    "editor.defaultFormatter": "vscode.json-language-features"
  },
  "[markdown]": {
    "editor.defaultFormatter": "DavidAnson.vscode-markdownlint"
  },
  // ===== 以下は拡張機能の設定 =====
  "redhat.telemetry.enabled": true,
  // Color Theme (GitHub Dark Default)
  "workbench.colorTheme": "GitHub Dark Default",
  // メリハリをつけるため下部パネルとサイドバーの色を調整
  "workbench.colorCustomizations": {
    "[GitHub Dark Default]": {
      "panel.background": "#0d1117", // 下部パネルの背景色
      "sideBar.background": "#0a0c10", // サイドバーの背景色
      "sideBarSectionHeader.background": "#07080a", // サイドバーのセクションヘッダーの背景色
      "textPreformat.background": "#6e768144", // コードの背景色
      "textPreformat.foreground": "#f0883e", // コードの文字色
      "peekViewEditorStickyScroll.background": "#0d1117",
      // 差分のGutterアイコン
      "editorGutter.addedBackground": "#28a745cc", // 追加
      "editorGutter.deletedBackground": "#ff6f7acc", // 削除
      "editorGutter.modifiedBackground": "#e6c200cc", // 変更
      // 差分エディタ
      "diffEditor.insertedLineBackground": "#2ea04344",
      "diffEditor.insertedTextBackground": "#2ea04366",
      "diffEditor.removedLineBackground": "#ff5a6a44",
      "diffEditor.removedTextBackground": "#ff5a6a66"
    }
  },
  // vscode-icons
  "workbench.iconTheme": "vscode-icons",
  // Remote SSH
  "remote.SSH.remotePlatform": {
    "dev-almalinux": "linux",
    "gpu-ubuntu": "linux",
    "mac-mini": "macOS"
  },
  "remote.SSH.enableAgentForwarding": true,
  "remote.autoForwardPortsSource": "hybrid",
  // GitHub Copilot
  // デフォルトでオフになっている言語も補完を効かせるようにする
  "github.copilot.enable": {
    "*": true,
    "plaintext": true,
    "markdown": true,
    "scminput": true,
    "sql": false
  },
  // GitHub Copilot Chat
  // 日本語で応答してもらう
  "github.copilot.chat.localeOverride": "ja",
  // OSSなどでコミットメッセージを英語で生成するのに便利
  "github.copilot.chat.commitMessageGeneration.instructions": [
    {
      "text": "Use a maximum of 120 characters."
    },
    {
      "text": "Messages should be in English."
    }
  ],
  // Path Intellisense
  "path-intellisense.absolutePathToWorkspace": false,
  "path-intellisense.autoTriggerNextSuggestion": true,
  // Prettify TypeScript: Better Type Previews
  "prettify-ts.hidePrivateProperties": false,
  "prettify-ts.typeIndentation": 2,
  "prettify-ts.maxDepth": 2,
  "prettify-ts.maxSubProperties": 20,
  "prettify-ts.maxUnionMembers": 30,
  // Todo Tree
  "todo-tree.tree.showCountsInTree": true,
  "todo-tree.tree.expanded": true,
  "todo-tree.tree.scanMode": "workspace only",
  "todo-tree.highlights.highlightDelay": 100,
  "todo-tree.general.tags": [
    "TODO",
    "NOTE",
    "FIXME",
    "XXX"
  ],
  "todo-tree.highlights.useColourScheme": true,
  "todo-tree.highlights.backgroundColourScheme": [
    "F2CC60",
    "79C0FF",
    "DB61A2",
    "F85149"
  ],
  "todo-tree.highlights.foregroundColourScheme": [
    "black",
    "black",
    "white",
    "white"
  ],
  // VSCode NeoVim
  // 公式の推奨設定
  "extensions.experimental.affinity": {
    "asvetliakov.vscode-neovim": 1
  },
  // `f` `d` を連続で押した時、escape扱いになる
  "vscode-neovim.compositeKeys": {
    "fd": {
      "command": "vscode-neovim.escape"
    }
  },
  // insertモード時にctrl+<key>をNeoVim側に送信したいものだけを指定
  "vscode-neovim.ctrlKeysForInsertMode": [
    "a", // 行頭に移動
    "b", // 1文字戻る
    "d", // delete
    "e", // 行末に移動
    "f", // 1文字進む
    // "g", // ESC(keybindings.jsonで設定)
    "p", // カーソルを上に移動
    "h", // backspace
    "k", // カーソルから行末まで削除
    "l", // Recenter Top Bottom
    // "m", // enterとして認識させる(keybindings.jsonで設定)
    "n", // カーソルを下に移動
    "w", // 1単語削除
    "y" // 貼り付け
  ],
  // normalモード時にctrl+<key>をNeoVim側に送信したいものだけを指定
  "vscode-neovim.ctrlKeysForNormalMode": [
    "a", // 数字を1増やす
    "d", // 画面半分下にスクロール
    "e", // カーソルを移動せず画面を下にスクロール
    "g", // ESC
    "h", // backspace
    "l", // Recenter Top Bottom
    "m", // enter
    // "o", // 前の場所に戻る(keybindings.jsonで設定)
    "r", // Redo
    // "t", // 元の場所に戻る(keybindings.jsonで設定)
    "u", // 画面半分上にスクロール
    "v", // 矩形選択
    "w", // ウィンドウ操作
    "x", // decrement
    "y", // カーソルを移動せず画面を上にスクロール
    "/", // コメントアウト
    "]" // 定義ジャンプ
  ],
  // フォーカス時にノーマルモードであれば、日本語IMEをオフにする
  "command-runner.terminal.name": "runCommand",
  "command-runner.terminal.autoClear": false,
  "command-runner.terminal.autoFocus": false,
  "command-runner.commands": {
    "ime off": "powershell.exe -ExecutionPolicy Bypass -NonInteractive -File 'C:\\Scripts\\ime.ps1' off"
  },
  // Calva
  // サイドバーにおけるREPLのインスペクタの階層的な括弧の色付けを有効にする
  // "calva.enableInspectorRainbow": true,
  // REPLの出力ファイルは${projectRootPath}/.calva/repl.calva-replを使う
  "calva.useLegacyReplWindowPath": false,
  // デフォルトでは、入力や出力やエラーがそれぞれ別の場所に出力される
  // すべてREPLウィンドウにまとめて表示されてほしい場合は以下を設定
  "calva.outputDestinations": {
    "evalResults": "repl-window", // 評価結果をREPLウィンドウに出力
    "evalOutput": "repl-window", // 標準出力/エラーをREPLウィンドウに出力
    "otherOutput": "repl-window" // CalvaのメッセージなどをREPLウィンドウに出力
  },
  // CalvaでのPareditによる削除操作時、削除したものをクリップボードにコピーする
  "calva.paredit.killAlsoCutsToClipboard": true,
  // Clojureプロジェクトを開いたとき、自動的にREPLに接続する(プロジェクト設定に従う)
  "calva.autoConnectRepl": true,
  // 標準出力やエラー出力がコメント(;)でプレフィックスされるのをやめる
  // ただし、Calva公式によると、予期せぬエラーが発生する可能性があるため、falseが無難ではある
  "calva.legacyPrintBareReplWindowOutput": true,
  // CalvaのREPL接続時に自動でサイドパネルのインスペクタにフォーカスが当たるのをやめる
  "calva.autoOpenInspector": false,
  // Clojure/ClojureScriptのコード参照などの機能(CodeLens)を有効にする
  "calva.referencesCodeLens.enabled": true,
  "calva.evaluationSendCodeToOutputWindow": false,
  "commands.commands": {
    "evalFormToComment": {
      "sequence": [
        "calva.evaluateTopLevelFormAsComment",
        {
          "command": "editor.action.joinLines",
          "delay": 200
        }
      ]
    }
  },
  // VSCodeのテストエクスプローラを使う(Experimental)
  "calva.useTestExplorer": true,
  // Code Runner
  "code-runner.runInTerminal": true,
  "code-runner.saveFileBeforeRun": true,
  "code-runner.clearPreviousOutput": true,
  "code-runner.showExecutionMessage": false,
  "code-runner.showRunCommandInEditorContextMenu": false,
  "code-runner.showRunCommandInExplorerContextMenu": false,
  "code-runner.executorMap": {
    "javascript": "bun",
    "typescript": "bun"
  },
  // Which Key
  "whichkey.delay": 0,
  "whichkey.bindings": [
    // ファイルエクスプローラーにフォーカス
    {
      "key": "f",
      "name": "File explorer",
      "type": "command",
      "command": "workbench.view.explorer"
    },
    // プロジェクトの全文検索にフォーカス
    {
      "key": "s",
      "name": "Search in files",
      "type": "command",
      "command": "workbench.view.search"
    },
    // hlsearchによる語のハイライトをオフにする
    {
      "key": "h",
      "name": "Turn off Highlight (:nohl)",
      "type": "command",
      "command": "vscode-neovim.send",
      "args": ":nohl<CR>"
    },
    // シンボル名をリネーム(リファクタリング)
    {
      "key": "r",
      "name": "Rename symbol",
      "type": "command",
      "command": "editor.action.rename"
    },
    // 実装にジャンプ
    {
      "key": "i",
      "name": "Go to implementation",
      "type": "command",
      "command": "editor.action.goToImplementation"
    },
    // code-runnerの機能で即座にコードを実行する
    {
      "key": "e",
      "name": "Execute current file",
      "type": "command",
      "command": "code-runner.run"
    },
    // 次のエラー報告箇所に移動
    {
      "key": "n",
      "name": "Next marker",
      "type": "command",
      "command": "editor.action.marker.nextInFiles"
    },
    // 前のエラー報告箇所に移動
    {
      "key": "p",
      "name": "Previous marker",
      "type": "command",
      "command": "editor.action.marker.prevInFiles"
    },
    // 次の変更箇所に移動
    {
      "key": "N",
      "name": "Next diff",
      "type": "command",
      "command": "editor.action.dirtydiff.next"
    },
    // 前の変更箇所に移動
    {
      "key": "P",
      "name": "Previous diff",
      "type": "command",
      "command": "editor.action.dirtydiff.previous"
    },
    // デバッグを開始
    {
      "key": "d",
      "name": "Debug start",
      "type": "command",
      "command": "workbench.action.debug.start"
    },
    // 実行を開始
    {
      "key": "D",
      "name": "Debug run",
      "type": "command",
      "command": "workbench.action.debug.run"
    },
    // ウィンドウ操作関連
    {
      "key": "w",
      "name": "Window",
      "type": "bindings",
      "bindings": [
        // 現在のタブグループの他のタブを全て閉じる
        {
          "key": "o",
          "name": "Close other windows",
          "type": "command",
          "command": "workbench.action.closeOtherEditors"
        }
      ]
    },
    // Git関連
    {
      "key": "g",
      "name": "Git",
      "type": "bindings",
      "bindings": [
        // ソースコントロールを開く
        {
          "key": "s",
          "name": "Git status",
          "type": "command",
          "command": "workbench.scm.focus"
        },
        // コミットログを開く
        {
          "key": "l",
          "name": "Git log",
          "type": "command",
          "command": "workbench.scm.history.focus"
        },
        // ブランチのチェックアウトを行う
        {
          "key": "b",
          "name": "Git checkout",
          "type": "command",
          "command": "git.checkout"
        },
        // git pullを行う
        {
          "key": "f",
          "name": "Git pull",
          "type": "command",
          "command": "git.pull"
        },
        // git pushを行う
        {
          "key": "p",
          "name": "Git push",
          "type": "command",
          "command": "git.push"
        }
      ]
    },
    // Clojure (Calva) 関連
    {
      "key": "m",
      "name": "Clojure",
      "type": "bindings",
      "bindings": [
        // 実行中のREPLに接続
        {
          "key": "c",
          "name": "Connect to a running REPL (non-project)",
          "type": "command",
          "command": "calva.connectNonProjectREPL"
        },
        // REPLから切断
        {
          "key": "D",
          "name": "Disconnect from a running REPL",
          "type": "command",
          "command": "calva.disconnect"
        },
        // プロジェクトの設定に従い、REPLを立ち上げ/再立ち上げして接続
        {
          "key": "i",
          "name": "(Re)Start a project REPL and connect (Jack-In)",
          "type": "command",
          "command": "calva.jackIn"
        },
        // Calvaによって立ち上げられたREPLを終了する
        {
          "key": "k",
          "name": "Stop/Kill the project REPL started by Calva (Jack-Out)",
          "command": "calva.jackOut"
        },
        // REPLウィンドウを開く
        {
          "key": "r",
          "name": "Show REPL window",
          "type": "command",
          "command": "calva.showReplWindow"
        },
        // 開いているファイル全体をREPLで評価する
        {
          "key": "e",
          "name": "Evaluate entire file",
          "type": "command",
          "command": "calva.loadFile"
        },
        // カーソル位置のトップレベルフォームをデバッグ用に評価する
        {
          "key": "g",
          "name": "Instrument current form for debugging",
          "type": "command",
          "command": "calva.debug.instrument"
        },
        // リストの先頭にカーソルを移動
        {
          "key": "h",
          "name": "Move cursor to list start",
          "type": "command",
          "command": "paredit.openList"
        },
        // リストの末尾にカーソルを移動
        {
          "key": "l",
          "name": "Move cursor to list end",
          "type": "command",
          "command": "paredit.closeList"
        },
        // リストから末尾要素を後ろに吐きだす(barf)
        {
          "key": "b",
          "name": "Barf forwards",
          "type": "command",
          "command": "paredit.barfSexpForward"
        },
        // リストから先頭要素を前に吐きだす(barf)
        {
          "key": "B",
          "name": "Barf backwards",
          "type": "command",
          "command": "paredit.barfSexpBackward"
        },
        // リストの後ろにある要素をリストの末尾に吸い込む(slurp)
        {
          "key": "s",
          "name": "Slurp forwards",
          "type": "command",
          "command": "paredit.slurpSexpForward"
        },
        // リストの前にある要素をリストの先頭に吸い込む(slurp)
        {
          "key": "S",
          "name": "Slurp backwards",
          "type": "command",
          "command": "paredit.slurpSexpBackward"
        },
        // 削除系操作
        {
          "key": "d",
          "name": "Delete",
          "type": "bindings",
          "bindings": [
            // カーソルからリストの開始までを削除
            {
              "key": "h",
              "name": "Delete to start of list",
              "type": "command",
              "command": "paredit.killListBackward"
            },
            // カーソルからリストの末尾までを削除
            {
              "key": "l",
              "name": "Delete to end of list",
              "type": "command",
              "command": "paredit.killListForward"
            },
            // 現在カーソルがあるフォーム(A)の親の内容を削除して、(A)の階層を1段階挙げる
            {
              "key": "u",
              "name": "Delete parent and raise children",
              "type": "command",
              "command": "paredit.raiseSexp"
            }
          ]
        },
        // かっこで包む系の操作
        {
          "key": "w",
          "name": "Wrap",
          "type": "bindings",
          "bindings": [
            // カーソル下のフォームを()で包む
            {
              "key": "(",
              "name": "Wrap with ()",
              "type": "command",
              "command": "paredit.wrapAroundParens"
            },
            // カーソル下のフォームを[]で包む
            {
              "key": "[",
              "name": "Wrap with []",
              "type": "command",
              "command": "paredit.wrapAroundSquare"
            },
            // カーソル下のフォームを{}で包む
            {
              "key": "{",
              "name": "Wrap with {}",
              "type": "command",
              "command": "paredit.wrapAroundCurly"
            },
            // カーソル下のフォームを""で包む
            {
              "key": "\"",
              "name": "Wrap with \"\"",
              "type": "command",
              "command": "paredit.wrapAroundQuote"
            }
          ]
        },
        // fiddleファイル関連
        {
          "key": "f",
          "name": "Fiddle",
          "type": "bindings",
          "bindings": [
            // 開いているclojureファイルに対応するfiddleファイルを開く
            {
              "key": "f",
              "name": "Open fiddle for source file",
              "type": "command",
              "command": "calva.openFiddleForSourceFile"
            },
            // 開いているfiddleファイルに対応するclojureファイルを開く
            {
              "key": "F",
              "name": "Open source file for fiddle",
              "type": "command",
              "command": "calva.openSourceFileForFiddle"
            },
            // 紐づいているfiddleファイルを実行
            {
              "key": "e",
              "name": "Evaluate fiddle for source code",
              "type": "command",
              "command": "calva.evaluateFiddleForSourceFile"
            }
          ]
        }
      ]
    }
  ],
  // MQL-Tools
  "mql_tools.Metaeditor.Metaeditor5Dir": "\"C:\\Program Files\\MetaTrader 5\\MetaEditor64.exe\"",
  "vsicons.customIconFolderPath": "c:\\Users\\in-th\\.vscode\\extensions\\mql-tools-icons",
  "vsicons.associations.files": [
    {
      "icon": "mq4",
      "extensions": [
        "mq4"
      ],
      "format": "svg"
    },
    {
      "icon": "mq5",
      "extensions": [
        "mq5"
      ],
      "format": "svg"
    },
    {
      "icon": "mqh",
      "extensions": [
        "mqh"
      ],
      "format": "svg"
    },
    {
      "icon": "ex4",
      "extensions": [
        "ex4"
      ],
      "format": "svg"
    },
    {
      "icon": "ex5",
      "extensions": [
        "ex5"
      ],
      "format": "svg"
    }
  ],
  // Rust Analyzer
  "rust-analyzer.inlayHints.parameterHints.enable": false,
  "rust-analyzer.inlayHints.typeHints.enable": false,
  "rust-analyzer.inlayHints.chainingHints.enable": false,
  // Python
  "python.analysis.typeCheckingMode": "strict",
  // Zig
  "zig.zls.enabled": "on",
  "zig.zls.inlayHintsHideRedundantParamNames": true,
  "zig.zls.inlayHintsHideRedundantParamNamesLastToken": true,
  "zig.zls.inlayHintsShowVariableTypeHints": false,
  "zig.zls.inlayHintsShowParameterName": false,
  "zig.zls.inlayHintsShowStructLiteralFieldType": false,
  "lldb.suppressUpdateNotifications": true,
  "dbcode.connections": [
    {
      "connectionId": "iW-GwZ0M0sEu_ovDgUqIB",
      "name": "syo-kudo-lms",
      "driver": "mysql",
      "connectionType": "host",
      "host": "localhost",
      "port": 3306,
      "ssl": false,
      "username": "root",
      "password": "",
      "savePassword": "secretStorage",
      "readOnly": false,
      "connectionTimeout": 30,
      "driverOptions": {
        "retrievePublickey": true
      },
      "filters": {
        "lms_phpunit/tables": [
          "lms_link_output_sheet_template_sco",
          "lms_output_sheet_template",
          "lms_result",
          "lms_result_detail",
          "lms_result_meta",
          "lms_sco",
          "lms_user"
        ]
      }
    }
  ],
  "typescript.updateImportsOnFileMove.enabled": "always",
  "pomodoro.breakTime": 10,
  "pomodoro.soundIntervalNotification": 1,
  "pomodoro.workColorButton": "orange",
  "pomodoro.workColorTime": "orange",
  "pomodoro.workTime": 45,
  "chat.mcp.serverSampling": {
    "GistPad: GistPad": {
      "allowedModels": [
        "github.copilot-chat/gpt-4.1"
      ]
    }
  },
  "zenMode.fullScreen": false,
  "zenMode.showTabs": "none",
  "zenMode.centerLayout": false,
  "window.menuBarVisibility": "compact",
  "window.commandCenter": false
  // "dart.flutterSdkPath": "C:\\Users\\in-th\\Install\\flutter",
  // "jdk.jdkhome": "c:\\Users\\in-th\\Install\\Oracle_JDK-21"
}